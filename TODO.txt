REMEMBER: GET IT UP AND RUNNING ASAP (details and optimizations can come later)

    PITCH: An application teaching goemetric transformations using puzzles, but the app itself is a puzzle the user must explore to unravel

        Idea: Instead of having menu buttons, make each puzzleset a cluster of four puzzles in a roughly square shape
            have a central square be the back button.  The central button also displays which puzzle is already complete
            since the puzzleset is so small, player can access any puzzle within 2 commands (1 command for adjacent puzzles)

            or have player move puzzles similar to how they move the fractals

            Instead of connecting colors to make lines, connect colors to make squares
                can have some colored squares stationary as a guide to player

    THE BIG THREE:
        3. Core Puzzle Features - transformations/splitting/forming and puzzle clear/puzzleset clear (do this in the morning)

            undos with rotations and reflections work with splitting all fractals to 1x1

            next is getting this working with translations (need to do the same thing to fractalB that we did to fractalA)
                this might be an opportunity to split what we did with fractalA into a function that we can call on fractalB too

            test on 4x4 fractal sizes

            implement splitting the bare minimum to allow and undo; don't split a 4x4 into 1x1s - only split into 2x2 or 1x1 for the quadrants that require it

            test on 4x4 fractals with undo

            Implement InputQueue, with a similar format to the command queue,
                If the player inputs while animation is playing, save the input type (including the x and y)
                Once the current animation is done playing, trigger the next AddCommand(...) by using the queued inputs

        1. Save/load system - SDL_GetPrefPath

            save and load undo stacks

        2. Audio - FMOD
            Sound is playing on translate up 
            Get music looping

        Learn.
            Watch Javidx9 videos or look through the code of his game engine
                get a working program compiled with his engine, and
                step through the code to see how he structured everything (especially the renderer and entity relationship for Draw())

            OLCGameEngine
                application->Draw(....) is how the application draws stuff
                I could just do Draw(entity.x, entity.y, entity.Sprite, etc) to draw
                    but i need to be able to draw objects and entity contains too


Set build (x86 or x64) (or should this be a build option???)

Open and build in visual studio using solutions generated by cmake to test if it works

Build on linux virtual machine to test different compiler (GCC) and the LLVM one (Clang)

Need to make sure MAX_VERTEX size in shaders are below hardware max 

Make sure I'm compile to release mode (and not debug) with optimizations turned to max
