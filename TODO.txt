REMEMBER: GET IT UP AND RUNNING ASAP (details and optimizations can come later)

change renderer->addentity() to raw pointers???
    maybe should stick to raw pointers until I have a clearer understanding of why I would need smart pointers

Get this done first since it will make everthing so much simpler to work with (overriding draw functions)
    Move App->Draw(entity) to Entity->Draw()
        this can still have the app call the renderer (or call renderer directly)
    this format will just be easier to understand from an API perspective (everything is about manipulating entities)
        reason: I want to be able to overload entity draw calls
            so I can have the puzzleiconselector draw the puzzleicons it has,
            I may do the same thing for PuzzleSets (having puzzlesets perform the draw call for all of its puzzles)

PuzzleSelector (and the PuzzleIcons it contains)
    puzzleicons need to track the puzzleselector it belongs to - just overload MoveTo() on PuzzleSelector to call MoveTo on the PuzzleIcons too
    classes are created, but need to fill them in to do the following:
        Drawing them on screen - DONE!
        Animating them on screen - DONE!
        Clickable
        Clicking them moves puzzles left/right

Allow window scaling when the application is active
    should check online for reference material on how to change SDL2 window sizes (event)

Everything is squished when the aspect ratio is not a 480x270 ratio
    how do I fix this?  I want everything to look that same (eg same height/width ratio) regardless of window ratio
    Two things:
        1. Currently, the projection matrix in renderer is hard coded to 480x270 - need to change this to accomodate aspect ratio of window
        2. Currently, Squares.cpp uses 480x270 world space (related to projection) need to change this to accomodate aspect ratio of window
        3. Need to accomodate window scaling too

    Tests: (all squares should be squares, and rectangles should be 2:1)
        1. Check fullscreen
        2. Check windowed with 480x270 aspect ratio
        3. Check windowed with aspect ratio of 2:1
        4. Check windowed with aspect ratio of 1:2

Set build (x86 or x64) (or should this be a build option???)

Build on linux virtual machine to test different compiler (GCC)
