REMEMBER: GET IT UP AND RUNNING ASAP (details and optimizations can come later)

    PITCH: An application teaching goemetric transformations using puzzles, but the app itself is a puzzle the user must explore to unravel

    THE BIG THREE:
        1. Save/load system - SDL_GetPrefPath (Spend mornings on this)
            default.sav should be in base path
            profile.sav should be in user localapp data

            Write out data to profile.json to make sure it saves correctly

            Read data in from profile.json if it exists

            Once I understand everything, wrap it up in a simple API specific to my app

        2. Audio - FMOD
            Sound is playing on translate up 
            Get music looping

        3. Core Puzzle Features - transformations/splitting/forming and puzzle clear/puzzleset clear

            Get Red/Gree/Blue Entry and Exit fractals functional
                placed on edge of puzzles.  
                Can't be transformed or split/formed
                Same color, but different visually from regular fractals
                keep in mind that these entry/exit fractals will be used to check Puzzle::IsCleared(), and PuzzleSet()::IsCleared()

            PuzzleClear/PuzzleSetClear status and checks on transformations (Don't hide these checks deep inside the puzzlesets or puzzle classses)
                since it comes right after a transformation, should perform the check in the same place in MenuLayer (right before setting animation start parameters)
                    and set a flag somewhere (in MenuLayer would be best) if the puzzle is cleared
                then after the transformation animation is done, go straight to the cleared puzzle animation (do something similar for clearing puzzlesets)

            Moves per puzzle limit

            Shaders and special effects as rewards for clearing puzzles

            Add visual touches
                like blurred fractals in front/behind play field that move along with puzzles to give illusion of depth and provide more animations
                blurry dust motes (or something similar) floating in the background - maybe have selecting puzzles motion affect these motes

            Selecting a puzzleset should have it unwrap and form the individual puzzles - this would require roughly 9 puzzles per set

        4. Stop with the unnecessary abstractions
                EntryPoint.cpp - creates single instance of application class (no need for singletons or anything)
                Application.h and cpp - contains Layer/Renderer/Audio/Input classes
                    Layer - all gameplay scripting
                    Input - get user inputs/events
                    Renderer - all OpenGL code
                    Audio - all FMOD code

Set build (x86 or x64) (or should this be a build option???)

Open and build in visual studio using solutions generated by cmake to test if it works

Build on linux virtual machine to test different compiler (GCC)

Need to make sure MAX_VERTEX size in shaders are below hardware max 


