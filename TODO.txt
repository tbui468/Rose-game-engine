REMEMBER: GET IT UP AND RUNNING ASAP (details and optimizations can come later)

    Idea: create a class that teaches the basics of blockchains using my typescript example to business owners
            have people who understand it better than me critique it and fix any problems I have,
                and then point in their direction for business connections (and collect a commission for it???)

            Give the source out to people who want it - but essentially run it inside a class for two hours + 1 break

    PITCH: An application teaching goemetric transformations using puzzles, but the app itself is a puzzle the user must explore to unravel
    GOAL: A vertical slice of the entire game - one complete cube (with other cubes grayed out so you can use them)
            48 puzzles - 8 sets.  First 3 must be done in order.  Last 5 can be done in any order

                puzzles are 4x4 max size.  Anchor points are guides, but sometimes they don't exist so player has to figure it out themselves
                Each cube has a red line puzzle that the player must connect to form the final tesseract - no limit on moves here (8 cubes layed out)
                    lay them out
                On clearing the tesseract, camera zooms out to show that the tesseract is one in an infinitely large number of other tesseracts (while animating them)
                roll credits
                
                1. 1x1 fractals, up to two colors, 3 transformations - anchors on all puzzles (first puzzle can only be exited when anchors connected)
                2. 1x1 fractals, up to two colors, 3 transformations - anchors on most puzzles
                3. 2x2 fractals, up to two colors, 3 transformations
                4. 2x2 fractals, up to two colors, up to 3 anchors to connect, 3 transformations (anchors all must be connected to puzzle to be complete)
                5. 4x4 fractals, up to three colors, 5 transformations 
                6. 4x4 fractals, up to three colors, 5 transformations 
                7. 4x4 fractals, up to three colors, 5 transformations 
                8. 4x4 fractals, up to four colors, 7 transformations

                4x4 is maximum playable grid (endpoints can be extra blocks on the longer screen dimension)

            look at notebook for design notes
                the puzzle interaction needs to be clarified and fleshed out ( main problem is I don't like solving puzzles in 3 dimensions)
                    solving in 3 dimensions requires too much input to see all possibilities, whereas for 2-d puzzles all the information
                    can be present on screen at one time.  In real life this is less of a problem since rotating a rubrik's cube with 
                    your hands is significantly easier than doing the same on a digital screen (due to the simple fact that we use our hands
                    on a daily basis and only use my application / mouse and keyboard for limited time a day)

                    The third dimension is more useful for exploration / building atmosphere than to solve complex puzzles (at least with the current 
                        limitations in user input - touchscreen, mouse, keyboard)  That will change once VR tech becomes more commonplace and advanced

                    -solving fractal puzzles is mostly clear (connecting colored line segments across surface of a square)
                    -solving cube faces puzzle is a bit fuzzy (connecting colored line segments wrapped around 6 surfaces of a cube, but requires 3-d motion????)
                    -solving 8 cubes puzzles for tesseract is very fuzzy (I don't know how I want to do this)


    THE BIG THREE:
        1. Learn NodeJS with Typescript - groundwork for stable work if this app doesn't pan out- do this for Xuan and our future
            Learn to set up a basic website using Nodejs

        2. Get and c++ SDL2 'hello world' application compiled and running on android - use my phone or virtual android to test
            googling will be my friend here
            keep in mind that more libraries will need to be linked
            OpenGL implementation on phones will have different hardware limitations (GPU)

        3. Core Puzzle Features - transformations/splitting/forming and puzzle clear/puzzleset clear (do this in the morning)

            Remove ability to scroll through puzzles (remove puzzle icon bar), and replace with click to select + zoom in
            a button appears in upper right that allows user to return to puzzle selection screen

            When on puzzle selection screen, a close button in upper right allows user to go to puzzleset (cube) selection screen


Set build (x86 or x64) (or should this be a build option???)

Open and build in visual studio using solutions generated by cmake to test if it works

Build on linux virtual machine to test different compiler (GCC) and the LLVM one (Clang)

Need to make sure MAX_VERTEX size in shaders are below hardware max 

Make sure I'm compile to release mode (and not debug) with optimizations turned to max
