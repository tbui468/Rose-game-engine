REMEMBER: GET IT UP AND RUNNING ASAP (details and optimizations can come later)

    PITCH: An application teaching goemetric transformations using puzzles, but the app itself is a puzzle the user must explore to unravel

    THE BIG THREE:
        3. Core Puzzle Features - transformations/splitting/forming and puzzle clear/puzzleset clear (Spend mornings on this)


                3. combined generalized forming and splitting for resizing fractals for Undo commands
                when combined together for UndoResizeFractals()
                    split all fractals necessary
                    call MergeFractals(merge list) on all groups of fractals that need to merge
                    call MoveTo() on all fractals that need to be animated

            Implement the Puzzle::UndoResizeFractals() - see the function for note:
                look at implementation in gamemaker prototype to see the cases I need to handle


            Implement InputQueue, with a similar format to the command queue,
                If the player inputs while animation is playing, save the input type (including the x and y)
                Once the current animation is done playing, trigger the next AddCommand(...) by using the queued inputs
            
        1. Save/load system - SDL_GetPrefPath

            Write out data to profile.json to make sure it saves correctly

            Read data in from profile.json if it exists

            Default data should also be move out of json file - should write it in c++ and compile it with executable
                so that user can't accidentally delete default data

            once I understand the parser function in json class, try to roll my own parser
                it doesn't need to be the 50,000 line beast that is the library I'm using
                make it rigid and only capable of reading/writing to the specific format for my app

        2. Audio - FMOD
            Sound is playing on translate up 
            Get music looping

        Learn.
            Watch Javidx9 videos or look through the code of his game engine
                get a working program compiled with his engine, and
                step through the code to see how he structured everything (especially the renderer and entity relationship for Draw())


Set build (x86 or x64) (or should this be a build option???)

Open and build in visual studio using solutions generated by cmake to test if it works

Build on linux virtual machine to test different compiler (GCC) and the LLVM one (Clang)

Need to make sure MAX_VERTEX size in shaders are below hardware max 

Make sure I'm compile to release mode (and not debug) with optimizations turned to max
