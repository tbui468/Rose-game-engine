REMEMBER: GET IT UP AND RUNNING ASAP (details and optimizations can come later)

    PITCH: An application teaching goemetric transformations using puzzles, but the app itself is a puzzle the user must explore to unravel
    GOAL: A vertical slice of the entire game - one complete cube (with other cubes grayed out so you can use them)

            look at notebook for design notes
                the puzzle interaction needs to be clarified and fleshed out ( main problem is I don't like solving puzzles in 3 dimensions)
                    solving in 3 dimensions requires too much input to see all possibilities, whereas for 2-d puzzles all the information
                    can be present on screen at one time.  In real life this is less of a problem since rotating a rubrik's cube with 
                    your hands is significantly easier than doing the same on a digital screen (due to the simple fact that we use our hands
                    on a daily basis and only use my application / mouse and keyboard for limited time a day)

                    The third dimension is more useful for exploration / building atmosphere than to solve complex puzzles (at least with the current 
                        limitations in user input - touchscreen, mouse, keyboard)  That will change once VR tech becomes more commonplace and advanced

                    -solving fractal puzzles is mostly clear (connecting colored line segments across surface of a square)
                    -solving cube faces puzzle is fuzzy (connecting colored line segments wrapped around 6 surfaces of a cube, but requires 3-d motion????)
                    -solving 8 cubes puzzles for tesseract if very fuzzy (I don't know how I want to do this)


    THE BIG THREE:
        1. ReactJS - hello world - groundwork for potential work if this app doesn't pan out- do this for Xuan and our future
            Get a hello world react app working - get it done fast with simple tools (can see how to manually compile later)

            Typescript - hit the basics tomorrow with node.js (then do express, mongodb and then react (with typescript this time))

            Find two simple projects tutorials I can follow so I can get a feel for ReactJS 
                tic-tac-toe for hello world - get it working (dont worry about learning every detail)
                Photo gallery app from react examples for week 1 - make it and modify it
                Book store selling app for week 2 - make it and modify it
                personal project for week 3 - make it production ready and deploy

            Get a good project that I can put in portfolio by the end of the month of December

        2. Test on Ubuntu virtual machine  (resume download and / or install vm)
            install unbuntu on virtual machine
            clone from Squares on Github
            build and compile/link
            run
            need to test this on a regular basis - after version changes (whatever that means)

        3. Core Puzzle Features - transformations/splitting/forming and puzzle clear/puzzleset clear (do this in the morning)

            look at code in puzzle::OnAnimationEnd()
              there's a problem with the new MergeFractal system I implemented,
              Merge doesn't take a list of fractal data and then construct a final fractal when that data,
              it instead takes one fractal data, and then destroys all fractals that are contained inside of it 
              and creates it

            test on 4x4 fractals with undo using bare minimum resizing - not working correctly (where is it failing?)
                not splitting up 4x4 (or it's splitting but not animating)
                trace what is happening using std::cout 

            Implement non-moveable colored blocks (which are the endpoints user has to connect using transformations)

            Implement completing puzzles by connecting colored blocks with non-moveable colored blocks

            How will this connect to the puzzlesets????



Set build (x86 or x64) (or should this be a build option???)

Open and build in visual studio using solutions generated by cmake to test if it works

Build on linux virtual machine to test different compiler (GCC) and the LLVM one (Clang)

Need to make sure MAX_VERTEX size in shaders are below hardware max 

Make sure I'm compile to release mode (and not debug) with optimizations turned to max
